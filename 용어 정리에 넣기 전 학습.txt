///
개인적으로 공부하기 위해 메모중인 텍스트 공간
이론적인 부분부터 다시 시작하기 때문에 다른 사람의 글에서부터 가져오는 것으로부터 시작하고 있음
이것을 바탕으로 디자인 패턴이나 프로그램의 구조를 분석하면서 이해할 것임
/// 

메모리 구조
코드 영역: 프로그램 상에서 실행할 소스코드가 저장되는 영역
>> CPU에서 해당 코드들을 가져가서 하나씩 처리
>> 프로그램이 실행되고나서부터 종료될 때까지 메모리에 계속 남아있음


데이터 영역: 전역변수와 정적(static)변수가 저장되는 영역
>> 전역 변수: 프로그램이 실행될 때 생성되어, 종료될 때까지 소멸되지 않는 변수
>> 정적 변수: 


힙 영역: 프로그래머가 직접 공간을 할당, 해제하는 메모리 공간
>> 동적 할당?
>> malloc() 또는 new 연산자를 통해 메모리를 할당하고 free또는 delete연산자를 통해 메모리를 해제
>> 선입선출의 방식
	-> 메모리의 낮은 주소에서 높은 주소의 방향으로 할당되기 때문>>???
>>런타임 시기에 크기 결정



스택 영역: 프로그램이 자동으로 사용하는 (임시 메모리 영역?)
>>정적 할당?
>> 함수의 실행이 완료되면, 스택에 저장된 메모리가 소멸됨
>>
>>컴파일 시기에 크기 결정


정적할당: 컴파일 단계에서 필요한 메모리 공간을 할당하는 것
>> 스택에 저장된다
동적할당: 실행 단계에서 메모리 공간을 할당해주는 것
>>힙에 저장된다

정적 바인딩: 
동적 바인딩: 

정적 메모리: 
동적 메모리: 

할당: 무언가를 제공한다는 의미? >> ~(무엇)를 확보한다.

변수: 프로그램 코드 상에서 기능을 구현하기 전에 바탕이 될 재료
전역 변수: 함수 밖에서 선언한 변수. 프로그램 종료 전까지 잔재. 클래스 외부에서 선언
지역 변수: 함수 내에서 선언한 변수. 해당 함수 종료시 소멸
정적 변수: 
멤버 변수: 함수 밖에서 선언한 변수. 프로그램 종료 전까지 메모리에 잔재. 클래스 내부에서 선언
정적 멤버 변수: 

전역변수와 멤버변수는 같은 의미로 봐도 무방한가?
>>멤버 변수는 클래스 내에 함수 외적으로 선언한 변수?이고
>>전역 변수는 클래스 외부에서 선언한 변수이다?

C++에서 ::의 역할
>> 범위 지정 연산자

범위 지정 연산자: 같은 함수나 변수가 2개 이상 존재할 때 사용해야할 영역을 정하기 위한 연산자


주소 연산자 &: 변수의 메모리 주소값 반환

참조 연산자 *: 포인터의 이름이나 주소 앞에 사용하며
해당 주소를 참조하여 주소에 저장되어 있는 값을 반환
>> 실제 변수 값

포인터: 함수의 주소값

객체: 클래스 타입의 변수




//
싱글톤 생성하는데 의문점 투성이다
getinstance()부분에 *처리해야하는 이유
return *singleObject; 로 처리해도 오류없던데 이걸로 해도 괜찮지 않나
포인터가 굳이 필요한가
//


싱글톤에 정적멤버를 사용한 이유
>> 싱글톤이 의미하는 바가 오직 하나만 존재할 수 있도록 해야하기 때문에
static을 사용하여 어느 곳에서든 하나의 주소값을 참조하게 만든다?

C/C++ 에서 싱글톤 구조를 만들 때 반드시 필요한 것
>> 생성자와 소멸자, static 변수, 포인터

상속된 구조에서 자식에서 부모의 멤버를 구현하지 않아도 되는 이유
>> 상속은 부모가 가진 변수와 기능들을 자식이 그대로 받아오기에 
굳이 자식에서 멤버를 구현하지 않아도 된다?

C/C++에서 선언과 정의를 분리해야하는 이유
>>

싱글톤 패턴 문제
1. 싱글톤이란 무엇인가?
static 포인터 멤버를 선언하여 정의한 객체를 모든 외부 요소에서 
해당 객체의 주소값을 참조하도록 하여 한 개의 객체만 남길 수 있도록
보장하는 디자인 패턴

2. 싱글톤을 만들기 위해서 사용되는 기법들과 이를 사용하는 이유
생성자 - 객체를 동적할당하기 위해 사용한다?

소멸자 - 싱글톤에서 객체를 동적할당하여 만들기 때문에 소멸자를 이용해 
사용자가 직접 메모리를 해제하기 위해 사용함. 
소멸자를 사용하지 않으면 메모리에 계속 남아있기 때문에 공간을

static - static없이 변수를 선언하게 되면 
외부 요소에서 이 값을 참조가 아닌 복사의 형식으로 사용하기 때문에
하나만 존재할 수 있도록 보장한다는 규칙에 위반됨.

포인터 - 해당 멤버의 주소값을 외부 요소들이 찾아갈 수 있도록 하기 위함?

3. 싱글톤 패턴의 응용 게임에서 사용된 예시
GameManager(유저 골드? 사용자 정보?), SoundManager...등과 같이
여러 개를 생성할 필요가 없고 외부 요소에 의해서 참조해야할 것들에 싱글톤 패턴을 사용함