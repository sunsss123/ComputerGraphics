Direct3D 예제

Matrices.cpp

관련 용어나 실습 경험 정리

Vertex 예제와 달리 변경되었거나 추가된 사항
-InitD3D에서 코드 추가된 사항
{
/// 컬링기능을 끈다. 삼각형의 앞면, 뒷면을 모두 렌더링한다.
g_pd3dDevice->SetRenderState(D3DRS_CULLMODE, D3DCULL_NONE);
/// 정점에 색깔값이 있으므로, 광원기능을 끈다.
g_pd3dDevice->SetRenderState(D3DRS_LIGHTING, FALSE);
}
-InitVB()에서 InitGeomery()로 변경됨

Matrices 용어 정리

지오메트리: 공간에서 물체의 모양, 위치, 크기 등에 대한 연구를 다루는 수학 분야
>> 게임 그래픽 측면에서, 물체 / 이미지를 그려낼 어떠한 방식?
지오메트리 셰이더:
셰이더: 
버텍스: 이미지를 그려내기 위해 기준점을 잡을 점(어떠한 것을 기준으로 지정하는 점?)?
폴리곤: 그래픽 공간에서 3개 이상의 점들이 모여 만들어낸 어떤 면을 의미함
>> 3개의 점의 면 => 삼각형 폴리곤
>> 4개의 점의 면 => 사각형 폴리곤 등

컬링(Culling)
-사전적 의미
>> 고르기, 선택, 꽃따기?
-게임적 의미: 실시간 렌더링 방식의 3D게임 내에서 
렌더링 할 필요가 없는 요소들을 선별, 제외하여 렌더링 시 부하를 줄여주는 처리를 의미

>>게임화면 중 플레이어의 시점(카메라)에서 보이지 않는 요소들은
>>굳이 플레이어 입장에서 보이지 않기 때문에 낭비되는 요소로 취급될 수 있음
>>플레이어(카메라)의 시점에서 보이지 않는 위치의 요소들을 렌더링에서 제외하여
>>그 요소들을 그리지 않도록 하여 성능 낭비를 줄이는 것?
>>플레이어의 시점에서 보이지 않는 요소들
	=> 카메라에서 인식되는 오브젝트 뒤에 겹쳐진 오브젝트들?
	=> 카메라의 범위에서 벗어나 있는 모든 오브젝트들?
	
렌더링: 3D모델을 2D화면에 그리는 과정

깊이버퍼: 렌더링 과정에서 각 픽셀의 깊이 정보를 저장하는 메모리버퍼?를 의미
>> 깊이(결과값?)의 기준을 0과 1사이의 범위로 정함?
>> 렌더링된 A이미지와 B이미지가 서로 겹치는 범위가 존재할 경우
>> 겹쳐진 부분의 A 깊이값이 B보다 0에 가까울 때 
>> 겹쳐져있는 부분에서 B의 픽셀은 그려지지 않는 것으로 한다?
->여기서 0과 1이라는 기준을 어떻게 잡는가?

메모리 버퍼:
>>

D3DXMATRIXA16: 다이렉트X 3D의 4x4행렬 구조체

/////
 
Matrices 실습

월드 행렬: 어떠한 행렬 구조체를 뷰 행렬, 프로젝션 행렬 설정하기 전에
		  이 구조체의 축의 회전 값을 설정하기위한 행렬?
		  >> 이 구조체는 뷰 행렬과 프로젝션 행렬에는 영향이 주지 않음?
		  
뷰 행렬: 월드 행렬을 통한 영향을 받는 이미지들을 시각적으로 담아내는
		카메라 구조체의 위치, 회전, 반전? 값들을 설정하는 행렬 구조체?

프로젝션 행렬: 뷰 행렬을 통한 값 설정이 마무리 된 카메라 구조체의
			시야값에 대해 설정하는 행렬 구조체?

뷰 행렬 값 변경
-vEyePt(x, y, z) 눈의 위치를 설정하는 벡터 => 카메라의 포지션
vEyePt의 x축
>> x축은 음수 양수 상관없이 보이는 이미지가 동일함
>> x축의 양수 값 혹은 음수 값이 증가할수록 거리가 멀어짐 
vEyePt의 y축
>> y축이 음수일 때, 반시계 방향으로 회전함 
>> y축이 양수일 때, 시계 방향으로 회전함	  
>> y축은 음수 양수 상관없이 보이는 이미지가 동일함 -> ?
	->근데 1의 값을 기준으로 음수 양수 체크했을 때는 살짝 다르게 보이는 듯함
vEyePt의 z축
>> Z축은 음수 양수 상관없이 보이는 이미지가 동일함
>> 양수와 음수 값 모두 증가할수록 이미지와의 거리가 멀어짐

-vLookatPt(x, y, z) 눈이 바라보는 위치를 설정하는 벡터 => 카메라의 회전


-vUpVec(x, y, z) 천정 방향을 나타내는 상방벡터 => 카메라의 반전같은데 모르겠음
>> y값 양수 / 음수 설정에따라 이미지가 반전되어 보임 => 카메라의 y축 반전느낌같음
>> x값이 양수 증가할 때 이미지가 왼쪽으로 누워버림
>> x값이 음수 증가할 때 이미지가 오른쪽으로 누워버림
>> z축은 값을 수정해도 변화가 없음


D3DXMatrixPerspectiveFovLH(&matProj, D3DX_PI / 4, 1.0f, 1.0f, 100.0f);
D3DXMatrixPerspectiveFovLH(프로젝션 설정할 행렬의 포인터, 시야각, 종횡비, 근접 클리핑 평면, 원거리 클리핑 평면);
프로젝션 설정할 행렬의 포인터:  
>> 
시야각(Field Of View): 카메라가 확보할 수 있는 크기
>> 분모의 값이 증가할수록 시점에 확보되는 이미지의 크기가 커짐
	->더 가깝게 보이는 듯함
종횡비(aspect ratio): 
>>종횡비에 해당하는 변수 값이 증가할수록 보이는 이미지의 가로 폭이 좁아짐
>>변수 값이 감소할수록 보이는 이미지의 가로 폭이 넓어짐
클리핑: 
-근접 클리핑 변수
>> 값이 증가할수록 어느 시점부터 이미지의 일부분이 보이지 않다가 
   이미지의 전체가 보이지 않게 됨
>>0미만인 값에서는 아예 보이지 않음
>> 카메라의 시작점 값으로 추측됨

-원거리 클리핑 변수
>> 값을 크게 해도 음수 값으로 해도 0으로해도 변화가 없음
>> 뭔지 모르겠음


Matrices 문제
1.컬링은 무엇인가? 왜 해야하는가?

1.1. 컬링은 무엇인가?
>> 컬링이란 렌더링될 이미지? 셰이더?를 카메라(플레이어의 시점)의 정면 시야를 기준
>> 카메라의 가장 앞쪽에 위치하는 이미지, 서로 겹쳐지지 않는 이미지들은 모두 렌더링하고]
>> 카메라의 시야에 위치하지 않는 이미지들은 렌더링하지 않는다
>> 카메라의 시야에 들어오기는 하나, 렌더링될 이미지들이 겹쳐지는 경우
>> 렌더링되는 이미지보다 뒤쪽에 위치하면서 겹쳐지는 이미지는 렌더링하지 않는다

1.2. 왜 해야하는가?
>> 만약에 컬링기법을 활용하지 않는다면
>> 카메라에 시야에 확보되지 않거나 앞쪽 이미지에 의해 가려지는
>> 굳이 렌더링하지 않아도 될 이미지들까지 전부 렌더링 해버리면
>> 사용자에 입장에서 어차피 보여지지 않는 이미지들에 의해
>> 메모리 공간이 사용되면서 불필요한 성능 낭비가 발생한다
>> 스케일이 작은 프로젝트에서는 큰 차이가 없겠으나
>> 스케일이 큰 RPG규모 혹은 그래픽이 뛰어난?? 게임에서 프레임 문제가 생길 듯하다
/////////

2. 월드 행렬, 뷰 행렬, 프로젝션 행렬은 무엇인가?
2.1. 월드 행렬
>> 윈도우 창이 생성될 때 전체화면에 대한 행렬 구조체?
>> 월드 좌표 공간(?)의 축이 회전한다
2.2. 뷰 행렬
>> WinAPI창이 생성되고 월드 행렬로 만들어진 좌표 공간에서
>> 생성되는 이미지를 초기화할 행렬 구조체
>> 카메라의 위치, 회전 값들을 설정하는 행렬
2.3. 프로젝션 행렬
>> 월드 행렬 공간에서 이미지의 시각 정보를 받아낼 
	카메라의 시야에 대한 값을 설정하는 행렬?
